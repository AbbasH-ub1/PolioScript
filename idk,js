const fs = require('fs');
const csv = require('csv-parser');

let json = [];

function capitalizeFirstLetter(str){
    return str.toLowerCase().replace(/\b\w/g, char => char.toUpperCase());
}

function formatUCString(str) {

    if(str.length>3){
        const regex = /(.{2,})(.*?\1)/;
      
        const match = regex.exec(str);
        
        if (match) {
          const pattern = match[1]; 
      
          let index = str.indexOf(pattern);
          index = str.indexOf(pattern, index + pattern.length);
          
          if (index !== -1) {
            str = str.slice(0, index) + str.slice(index + pattern.length);
          }
        }
    }
    
    
    str = str.replace(/\(.*?\)/g, '');
    str = str.replace(/([a-zA-Z])\1/g, '$1');

    if (!/^[a-zA-Z]/.test(str)) {
        str = "UC " + str;
    }

    return str.trim();
}

function getFirstName(name){
    const indexOfLastSpace = name.lastIndexOf(" ");
    if (indexOfLastSpace === -1){
        return name;
    }
    return name.slice(0, indexOfLastSpace);
}

function getLastName(name){
    const indexOfLastSpace = name.lastIndexOf(" ");

    if (indexOfLastSpace === -1){
        return "";
    }

    return name.slice(indexOfLastSpace+1, name.length);
}

function csvTo2DArray(filePath) {
  const rows = [];

  return new Promise((resolve, reject) => {
    fs.createReadStream(filePath)
      .pipe(csv({headers:false}))
      .on('data', (row) => {
        rows.push(Object.values(row)); // Convert each row object to an array of values
      })
      .on('end', () => resolve(rows))
      .on('error', (error) => reject(error));
  });
}

async function largeFileParser(){
    const data = await csvTo2DArray("fresh.csv");

    let currentUCMO = {};

    for(const [i, row] of data.entries()){
        if(row[6]!=="-"){
            if(i!==0){
                json.push(currentUCMO);
            }
            currentUCMO = {};

            obj = {
                sr: row[0],
                division: row[1],
                district: row[2],
                townOrTehsil: row[3],
                uc: row[4],
                firstName: getFirstName(row[5]),
                lastName: getLastName(row[5]),
                role: "UCMO",
                gender: row[6] === "M" ? "MALE" : "FEMALE",
                phone: `0${row[7]}`,
                CNIC: row[8],
                aics: [{
                    sr: row[0],
                    division: row[1],
                    district: row[2],
                    townOrTehsil: row[3],
                    uc: row[4],
                    firstName: getFirstName(row[9]),
                    lastName: getLastName(row[9]),
                    role: "AIC",
                    gender: row[10] === "M" ? "MALE" : "FEMALE",
                    phone: `0${row[11]}`,
                    CNIC: row[12]
                }]
            }
            currentUCMO = obj;
        } else {
            const aicUC = currentUCMO.uc;
            aicObj = {
                sr: row[0],
                division: row[1],
                district: row[2],
                townOrTehsil: row[3],
                uc: aicUC,
                firstName: getFirstName(row[9]),
                lastName: getLastName(row[9]),
                role: "AIC",
                gender: row[10] === "M" ? "MALE" : "FEMALE",
                phone: `0${row[11]}`,
                CNIC: row[12]
            }
            currentUCMO.aics.push(aicObj);

            if(i === data.length-1){
                json.push(currentUCMO);
            }
        }
    }

    fs.writeFileSync("fresher.json", JSON.stringify(json, null, 2))
}

async function smallFileParser(){
    const data = await csvTo2DArray("./oldcsv/tinyfile.csv");

    let jsonArray = []

    let currentUCMO = {};
    let currentAIC = {};

    for(const [i, row] of data.entries()){
        obj = {
            sr: row[0],
            division: row["1"],
            district: capitalizeFirstLetter(row[2]),
            townOrTehsil: capitalizeFirstLetter(row[3]),
            uc: row[4],
            firstName: capitalizeFirstLetter(getFirstName(row[5])),
            lastName: capitalizeFirstLetter(getLastName(row[5])),
            role: row[9]==="Mobile team" ? "FLW" : row[9] === "Area Incharge" ? "AIC" : "UCMO",
            phone: `0${row[7]}`,
            CNIC: row[6]
        }

        if(obj.role==="UCMO"){
            if(Object.keys(currentUCMO).length !== 0){
                jsonArray.push(currentUCMO);
            }
            currentUCMO = obj;
        }
        else if(obj.role==="AIC"){
            if(!currentUCMO.aics){
                currentUCMO.aics = [];
            }
            currentAIC = obj;
            currentUCMO.aics.push(obj);
        }
        else{
            if(!currentAIC.flws){
                currentAIC.flws = [];
            }
            currentAIC.flws.push(obj);
        }

        if(i === data.length-1){
            jsonArray.push(currentUCMO);
        }
    }

    fs.writeFileSync("greatwork.json", JSON.stringify(jsonArray, null, 2))
}

async function ucparser(){
    const data = await csvTo2DArray("therealshit.csv");

    let ucArray = [];

    for(row of data){
        if(row[4]!==""){

            ucArray.push(row[4]);
        }
    }

    fs.writeFileSync("uc.jsons", JSON.stringify(ucArray, null, 4));
}

function addUser(row, role, currentUC, currentTehsil){
    const genderEnum = {
        "F": "FEMALE",
        "M": "MALE"
    }

    if(row[2]!==""){
        currentTehsil = row[2];
    }

    if(row[3]!==""){
        currentUC = `UC ${row[3]}`;
        if(row[4]!=="") currentUC += row[4]
    }

    const userObj = {
        firstName: role === "UCMO" ? getFirstName(row[5]): role === "AIC" ? getFirstName(row[9]) : getFirstName(row[14]),
        lastName: role === "UCMO" ? getLastName(row[5]): role === "AIC" ? getLastName(row[9]) : getLastName(row[14]),
        role: role,
        division: "Lahore",
        district: "Lahore",
        tehsil: currentTehsil,
        uc: currentUC,
        gender: role === "UCMO" ? genderEnum[row[6]] : role === "AIC" ? genderEnum[row[10]] : genderEnum[row[15]],
        phone: role === "UCMO" ? row[7] : role === "AIC" ? row[11] : row[16],
        cnic: role === "UCMO" ? row[8] : role === "AIC" ? row[12] : row[17]
    }
    if(role === "UCMO") {userObj.aics = []};
    if(role === "AIC") {userObj.flws = []};

    return {user: userObj, currentUC, currentTehsil}

}

function validatePhone(number){
    return number.length === 10 && /^\d+$/.test(number) && number.startsWith("3");
}

function validateCNIC(cnic){
    return cnic.length === 13 && /^\d+$/.test(cnic);
}

function validateData(row){
    phoneUCMO = row[7];
    cnicUCMO = row[8];

    phoneAIC = row[11];
    cnicAIC = row[12];

    phoneFLW = row[16];
    phoneFLW = row[17];

    return {
        ucmoValidation: validatePhone(phoneUCMO) && validateCNIC(cnicUCMO),
        aicValidation: validatePhone(phoneAIC) && validateCNIC(cnicAIC),
        flwValidation: validatePhone(phoneFLW) && validateCNIC(cnicFLW)
    }
}

async function superParser(){
    const data = await csvTo2DArray("finalboss.csv");

    let currentUCMO = {};
    let currentAIC = {};
    let currentUC = "";
    let currentTehsil = "";

    let badUCMOData = false;
    let badAICData = false;
    let badFLWData = false;

    let jsonArray = [];



    for(const [i, row] of data.entries()){
        const { ucmoPresent, aicPresent, flwPresent } = analyzeRow(row)

        if(ucmoPresent){
            if(Object.keys(currentUCMO).length!==0){
                jsonArray.push(currentUCMO);
            }

            const addedData = addUser(row, "UCMO", currentUC, currentTehsil);
            currentUCMO = addedData.user;
            currentUC = addedData.currentUC;
            currentTehsil = addedData.currentTehsil;
        }

        if(aicPresent){
            const addedData = addUser(row, "AIC", currentUC, currentTehsil);
            currentAIC = addedData.user;
            currentUC = addedData.currentUC;
            currentTehsil = addedData.currentTehsil;

            currentAIC = addedData.user;
            currentUCMO.aics.push(addedData.user);
        }

        if(flwPresent){
            const addedData = addUser(row, "FLW", currentUC, currentTehsil);
            currentUC = addedData.currentUC;
            currentTehsil = addedData.currentTehsil;

            currentAIC.flws.push(addedData.user);
        }

        if(i===data.length-1){
            jsonArray.push(currentUCMO);
        }
    }

    fs.writeFileSync("./results/test1.json", JSON.stringify(jsonArray, null, 2));
}

function analyzeRow(row){
    let flags = {ucmoPresent:false, aicPresent:false, flwPresent:false};
    if(row[5]!==""){
        flags.ucmoPresent = true;
    }
    if(row[9]!==""){
        flags.aicPresent = true;
    }
    if(row[14]!==""){
        flags.flwPresent = true;
    }

    return flags;
}



// ucparser();
// largeFileParser();
// smallFileParser();

superParser();
